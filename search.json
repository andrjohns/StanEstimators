[{"path":"https://andrjohns.github.io/StanEstimators/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 StanEstimators authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://andrjohns.github.io/StanEstimators/articles/Getting-Started.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started with StanEstimators","text":"vignette provides basic introduction features capabilities StanEstimators package. StanEstimators provides interface estimating R functions using various algorithms methods implemented Stan. StanEstimators package supports algorithms implemented Stan. available methods, corresponding functions, :","code":""},{"path":"https://andrjohns.github.io/StanEstimators/articles/Getting-Started.html","id":"motivations","dir":"Articles","previous_headings":"Introduction","what":"Motivations","title":"Getting Started with StanEstimators","text":"Stan powerful, can high barrier entry new users - need translate existing models/functions Stan language. StanEstimators provides simple interface users estimate R functions using Stan’s algorithms without needing learn Stan language. Additionally, also allows users ‘sanity-check’ Stan code comparing results Stan code results original R function. Finally, can difficult interface Stan existing R packages functions - requires bespoke Stan models problem hand, something may great time investment many users. StanEstimators aims address issues.","code":""},{"path":"https://andrjohns.github.io/StanEstimators/articles/Getting-Started.html","id":"estimating-a-model","dir":"Articles","previous_headings":"Introduction","what":"Estimating a Model","title":"Getting Started with StanEstimators","text":"example, use popular ‘Eight Schools’ example Stan documentation. example used demonstrate use hierarchical models Stan. model defined : $$ y_j \\sim N(\\theta_j, \\sigma_j), \\quad j=1,\\ldots,8 \\\\ \\theta_j \\sim N(\\mu, \\tau), \\quad j=1,\\ldots,8 $$ data:","code":"y <- c(28,  8, -3,  7, -1,  1, 18, 12) sigma <- c(15, 10, 16, 11,  9, 11, 10, 18)"},{"path":"https://andrjohns.github.io/StanEstimators/articles/Getting-Started.html","id":"specifying-the-function","dir":"Articles","previous_headings":"Introduction > Estimating a Model","what":"Specifying the Function","title":"Getting Started with StanEstimators","text":"specify function compatible StanEstimators, need define function takes vector parameters first argument returns single value (generally unnormalized target log density): Note additional data required function passed additional arguments. case, need pass data yy σ\\sigma. Alternatively, function can assume data available global environment, rather passed arguments.","code":"eight_schools_lpdf <- function(v, y, sigma) {   mu <- v[1]   tau <- v[2]   eta <- v[3:10]    # Use the non-centered parameterisation for eta   # https://mc-stan.org/docs/stan-users-guide/reparameterization.html   theta <- mu + tau * eta    sum(dnorm(eta, mean = 0, sd = 1, log = TRUE)) +     sum(dnorm(y, mean = theta, sd = sigma, log = TRUE)) }"},{"path":"https://andrjohns.github.io/StanEstimators/articles/Getting-Started.html","id":"estimating-the-function","dir":"Articles","previous_headings":"Introduction > Estimating a Model","what":"Estimating the Function","title":"Getting Started with StanEstimators","text":"estimate model, simply pass function relevant StanEstimators function. example, estimate function using MCMC sampling, use stan_sample function (uses -U-Turn Sampler default).","code":""},{"path":"https://andrjohns.github.io/StanEstimators/articles/Getting-Started.html","id":"parameter-bounds","dir":"Articles","previous_headings":"Introduction > Estimating a Model > Estimating the Function","what":"Parameter Bounds","title":"Getting Started with StanEstimators","text":"estimating standard deviation model (τ\\tau), need ensure positive. can specifying lower bound 0 τ\\tau. done passing vector lower bounds lower argument, corresponding elements vector matching order parameters function. Noting τ\\tau second parameter function, want specify lower bound parameters, can specify lower bounds :","code":"lower <- c(-Inf, 0, rep(-Inf, 8))"},{"path":"https://andrjohns.github.io/StanEstimators/articles/Getting-Started.html","id":"running-the-model","dir":"Articles","previous_headings":"Introduction > Estimating a Model > Estimating the Function","what":"Running the Model","title":"Getting Started with StanEstimators","text":"can now pass arguments stan_sample function estimate model. use default number warmup iterations (1000) sampling iterations (1000). Note need specify number parameters model (10) using n_pars argument. function know many parameters model, automatically determine .","code":"fit <- stan_sample(eight_schools_lpdf,                    n_pars = 10,                    additional_args = list(y = y, sigma = sigma),                    lower = lower,                    num_chains = 1)"},{"path":"https://andrjohns.github.io/StanEstimators/articles/Getting-Started.html","id":"inspecting-the-results","dir":"Articles","previous_headings":"Introduction > Estimating a Model","what":"Inspecting the Results","title":"Getting Started with StanEstimators","text":"estimates stored fit object using posterior::draws format. can inspect estimates using summary function (calls posterior::summarise_draws):","code":"summary(fit) #> # A tibble: 11 × 10 #>    variable     mean   median    sd   mad      q5    q95  rhat ess_bulk ess_tail #>    <chr>       <dbl>    <dbl> <dbl> <dbl>   <dbl>  <dbl> <dbl>    <dbl>    <dbl> #>  1 lp__     -3.96e+1 -39.3    2.69  2.53  -44.4   -35.5   1.00     222.     238. #>  2 pars[1]   7.43e+0   7.71   5.37  4.94   -1.75   15.4   1.00     307.     232. #>  3 pars[2]   6.61e+0   5.32   5.76  4.72    0.486  17.5   1.01     210.     233. #>  4 pars[3]   4.00e-1   0.400  0.924 0.955  -1.17    1.86  1.00     555.     567. #>  5 pars[4]  -9.14e-3  -0.0106 0.845 0.826  -1.40    1.38  1.00     750.     792. #>  6 pars[5]  -1.81e-1  -0.184  0.905 0.838  -1.74    1.30  1.00     689.     684. #>  7 pars[6]  -1.17e-2  -0.0149 0.930 0.914  -1.52    1.46  1.00     925.     729. #>  8 pars[7]  -3.79e-1  -0.398  0.839 0.844  -1.68    1.01  1.00     633.     681. #>  9 pars[8]  -1.85e-1  -0.151  0.904 0.873  -1.68    1.22  1.00     648.     642. #> 10 pars[9]   3.39e-1   0.325  0.924 0.912  -1.16    1.81  1.00     869.     759. #> 11 pars[10]  8.68e-2   0.112  0.912 0.898  -1.42    1.59  1.00     760.     718."},{"path":"https://andrjohns.github.io/StanEstimators/articles/Getting-Started.html","id":"model-checking-and-comparison---leave-one-out-cross-validation-loo-cv","dir":"Articles","previous_headings":"Introduction","what":"Model Checking and Comparison - Leave-One-Out Cross-Validation (LOO-CV)","title":"Getting Started with StanEstimators","text":"StanEstimators also supports use loo package model checking comparison. use , need specify function returns pointwise unnormalized target log density observation data - original function returns sum observations. model, can define function : can used loo function calculate LOO-CV estimate:","code":"eight_schools_pointwise <- function(v, y, sigma) {   mu <- v[1]   tau <- v[2]   eta <- v[3:10]    # Use the non-centered parameterisation for eta   # https://mc-stan.org/docs/stan-users-guide/reparameterization.html   theta <- mu + tau * eta    # Only the density for the outcome variable   dnorm(y, mean = theta, sd = sigma, log = TRUE) } loo(fit, pointwise_ll_fun = eight_schools_pointwise,     additional_args = list(y = y, sigma = sigma)) #> Warning: Some Pareto k diagnostic values are too high. See help('pareto-k-diagnostic') for details. #>  #> Computed from 1000 by 8 log-likelihood matrix. #>  #>          Estimate  SE #> elpd_loo    -31.2 0.9 #> p_loo         1.5 0.3 #> looic        62.4 1.9 #> ------ #> MCSE of elpd_loo is NA. #> MCSE and ESS estimates assume MCMC draws (r_eff in [0.4, 0.9]). #>  #> Pareto k diagnostic values: #>                           Count Pct.    Min. ESS #> (-Inf, 0.67]   (good)     5     62.5%   326      #>    (0.67, 1]   (bad)      3     37.5%   <NA>     #>     (1, Inf)   (very bad) 0      0.0%   <NA>     #> See help('pareto-k-diagnostic') for details."},{"path":"https://andrjohns.github.io/StanEstimators/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew R. Johnson. Author, maintainer. Jonah Gabry. Contributor. Rok Češnovar. Contributor. Stan Development Team. Copyright holder.           CmdStan sources headers Lawrence Livermore National Security. Copyright holder.           SUNDIALS sources headers","code":""},{"path":"https://andrjohns.github.io/StanEstimators/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Johnson AR (2025). StanEstimators: Estimate Parameters Arbitrary R Functions using 'Stan'. R package version 0.2.0.9000, https://andrjohns.github.io/StanEstimators/.","code":"@Manual{,   title = {StanEstimators: Estimate Parameters for Arbitrary R Functions using 'Stan'},   author = {Andrew R. Johnson},   year = {2025},   note = {R package version 0.2.0.9000},   url = {https://andrjohns.github.io/StanEstimators/}, }"},{"path":"https://andrjohns.github.io/StanEstimators/index.html","id":"stanestimators","dir":"","previous_headings":"","what":"Estimate Parameters for Arbitrary R Functions using Stan","title":"Estimate Parameters for Arbitrary R Functions using Stan","text":"StanEstimators package provides estimation back-end R functions, similar provided optim package, using algorithms provided Stan probabilistic programming language. Stan’s algorithms gradient-based, function gradients can automatically calculated using finite-differencing user can provide function analytical calculation.","code":""},{"path":"https://andrjohns.github.io/StanEstimators/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Estimate Parameters for Arbitrary R Functions using Stan","text":"can install pre-built binaries using: can build source using:","code":"# we recommend running this is a fresh R session or restarting your current session install.packages('StanEstimators', repos = c('https://andrjohns.r-universe.dev', 'https://cloud.r-project.org')) # install.packages(\"remotes\") remotes::install_github(\"andrjohns/StanEstimators\")"},{"path":"https://andrjohns.github.io/StanEstimators/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Estimate Parameters for Arbitrary R Functions using Stan","text":"Consider goal estimating mean standard deviation normal distribution, uniform uninformative priors parameters: y∼𝐍(μ,σ) y \\sim \\textbf{N}(\\mu, \\sigma) μ∼𝐔[−∞,∞] \\mu \\sim \\textbf{U}[-\\infty, \\infty] σ∼𝐔[0,∞] \\sigma \\sim \\textbf{U}[0, \\infty] known true values verification: estimation routines provided R, need specify function takes vector parameters first argument returns single scalar value (unnormalized target log density), well initial values parameters: Estimation time can also significantly reduced providing gradient function, rather relying finite-differencing:","code":"y <- rnorm(500, 10, 2) loglik_fun <- function(v, x) {   sum(dnorm(x, v[1], v[2], log = TRUE)) }  inits <- c(0, 5) grad <- function(v, x) {   inv_sigma <- 1 / v[2]   y_scaled = (x - v[1]) * inv_sigma   scaled_diff = inv_sigma * y_scaled   c(sum(scaled_diff),     sum(inv_sigma * (y_scaled*y_scaled) - inv_sigma)   ) }"},{"path":"https://andrjohns.github.io/StanEstimators/index.html","id":"mcmc-estimation","dir":"","previous_headings":"Usage","what":"MCMC Estimation","title":"Estimate Parameters for Arbitrary R Functions using Stan","text":"Full MCMC estimation provided stan_sample() function, uses Stan’s default U-Turn Sampler (NUTS) unless otherwise specified: can see parameters recovered accurately estimation relatively fast: ~1 sec 1000 warmup 1000 iterations Estimation time can improved providing gradient function: shows estimation time dramatically improved, now ~0.15 seconds 1000 warmup 1000 iterations.","code":"library(StanEstimators)  fit <- stan_sample(loglik_fun, inits, additional_args = list(y),                    lower = c(-Inf, 0), # Enforce a positivity constraint for SD                    num_chains = 1, seed = 1234) unlist(fit@timing) #>   warmup sampling  #>    0.720    0.707 summary(fit) #> # A tibble: 3 × 10 #>   variable    mean  median     sd    mad      q5     q95  rhat ess_bulk ess_tail #>   <chr>      <dbl>   <dbl>  <dbl>  <dbl>   <dbl>   <dbl> <dbl>    <dbl>    <dbl> #> 1 lp__     -1.05e3 -1.05e3 0.973  0.788  -1.05e3 -1.05e3  1.01     521.     720. #> 2 pars[1]   9.96e0  9.97e0 0.0912 0.0911  9.81e0  1.01e1  1.00     943.     712. #> 3 pars[2]   1.97e0  1.96e0 0.0637 0.0674  1.87e0  2.08e0  1.00     878.     615. fit_grad <- stan_sample(loglik_fun, inits, additional_args = list(y),                         grad_fun = grad,                         lower = c(-Inf, 0),                         num_chains = 1,                         seed = 1234) unlist(fit_grad@timing) #>   warmup sampling  #>    0.103    0.093 summary(fit_grad) #> # A tibble: 3 × 10 #>   variable    mean  median     sd    mad      q5     q95  rhat ess_bulk ess_tail #>   <chr>      <dbl>   <dbl>  <dbl>  <dbl>   <dbl>   <dbl> <dbl>    <dbl>    <dbl> #> 1 lp__     -1.05e3 -1.05e3 0.952  0.763  -1.05e3 -1.05e3 1.01      500.     675. #> 2 pars[1]   9.97e0  9.97e0 0.0905 0.0954  9.82e0  1.01e1 1.000     830.     531. #> 3 pars[2]   1.96e0  1.96e0 0.0619 0.0616  1.87e0  2.07e0 1.00     1047.     640."},{"path":"https://andrjohns.github.io/StanEstimators/index.html","id":"optimization","dir":"","previous_headings":"Usage","what":"Optimization","title":"Estimate Parameters for Arbitrary R Functions using Stan","text":"","code":"opt_fd <- stan_optimize(loglik_fun, inits, additional_args = list(y),                           lower = c(-Inf, 0),                           seed = 1234) opt_grad <- stan_optimize(loglik_fun, inits, additional_args = list(y),                           grad_fun = grad,                           lower = c(-Inf, 0),                           seed = 1234) summary(opt_fd) #>        lp__ pars[1] pars[2] #> 1 -1046.049  9.9691 1.96036 summary(opt_grad) #>        lp__ pars[1] pars[2] #> 1 -1046.049  9.9691 1.96036"},{"path":"https://andrjohns.github.io/StanEstimators/index.html","id":"laplace-approximation","dir":"","previous_headings":"Usage","what":"Laplace Approximation","title":"Estimate Parameters for Arbitrary R Functions using Stan","text":"","code":"# Can provide the mode as a numeric vector: lapl_num <- stan_laplace(loglik_fun, inits, additional_args = list(y),                           mode = c(10, 2),                           lower = c(-Inf, 0),                           seed = 1234)  # Can provide the mode as a StanOptimize object: lapl_opt <- stan_laplace(loglik_fun, inits, additional_args = list(y),                           mode = opt_fd,                           lower = c(-Inf, 0),                           seed = 1234)  # Can estimate the mode before sampling: lapl_est <- stan_laplace(loglik_fun, inits, additional_args = list(y),                           lower = c(-Inf, 0),                           seed = 1234) summary(lapl_num) #> # A tibble: 4 × 10 #>   variable     mean    median     sd    mad       q5        q95  rhat ess_bulk #>   <chr>       <dbl>     <dbl>  <dbl>  <dbl>    <dbl>      <dbl> <dbl>    <dbl> #> 1 log_p__  -1477.   -1475.    55.3   56.0   -1572.   -1389.     1.00      986. #> 2 log_q__     -1.01    -0.695  1.01   0.743    -3.03    -0.0443 1.00      913. #> 3 pars[1]     10.0     10.00   0.335  0.343     9.47    10.5    0.999     831. #> 4 pars[2]      7.45     7.39   0.897  0.893     6.10     9.08   1.00      987. #> # ℹ 1 more variable: ess_tail <dbl> summary(lapl_opt) #> # A tibble: 4 × 10 #>   variable     mean    median     sd    mad       q5        q95  rhat ess_bulk #>   <chr>       <dbl>     <dbl>  <dbl>  <dbl>    <dbl>      <dbl> <dbl>    <dbl> #> 1 log_p__  -1458.   -1457.    52.8   53.5   -1549.   -1374.     1.00      986. #> 2 log_q__     -1.01    -0.695  1.01   0.743    -3.03    -0.0443 1.00      913. #> 3 pars[1]      9.97     9.97   0.321  0.329     9.46    10.5    0.999     830. #> 4 pars[2]      7.16     7.10   0.827  0.824     5.91     8.66   1.00      987. #> # ℹ 1 more variable: ess_tail <dbl> summary(lapl_est) #> # A tibble: 4 × 10 #>   variable     mean    median     sd    mad       q5        q95  rhat ess_bulk #>   <chr>       <dbl>     <dbl>  <dbl>  <dbl>    <dbl>      <dbl> <dbl>    <dbl> #> 1 log_p__  -1458.   -1457.    52.8   53.5   -1549.   -1374.     1.00      986. #> 2 log_q__     -1.01    -0.695  1.01   0.743    -3.03    -0.0443 1.00      913. #> 3 pars[1]      9.97     9.97   0.321  0.329     9.46    10.5    0.999     830. #> 4 pars[2]      7.16     7.10   0.827  0.824     5.91     8.66   1.00      987. #> # ℹ 1 more variable: ess_tail <dbl>"},{"path":"https://andrjohns.github.io/StanEstimators/index.html","id":"variational-inference","dir":"","previous_headings":"Usage","what":"Variational Inference","title":"Estimate Parameters for Arbitrary R Functions using Stan","text":"","code":"var_fd <- stan_variational(loglik_fun, inits, additional_args = list(y),                               lower = c(-Inf, 0),                               seed = 1234) var_grad <- stan_variational(loglik_fun, inits, additional_args = list(y),                               grad_fun = grad,                               lower = c(-Inf, 0),                               seed = 1234) summary(var_fd) #> # A tibble: 5 × 10 #>   variable      mean    median     sd    mad       q5        q95   rhat ess_bulk #>   <chr>        <dbl>     <dbl>  <dbl>  <dbl>    <dbl>      <dbl>  <dbl>    <dbl> #> 1 lp__         0         0     0      0          0        0      NA          NA  #> 2 log_p__  -1047.    -1046.    1.25   0.975  -1049.   -1045.      1.00     1017. #> 3 log_g__     -0.978    -0.660 0.966  0.678     -2.84    -0.0566  1.00     1054. #> 4 pars[1]     10.0      10.0   0.0847 0.0877     9.88    10.2     0.999    1025. #> 5 pars[2]      1.92      1.92  0.0528 0.0523     1.83     2.01    1.00     1047. #> # ℹ 1 more variable: ess_tail <dbl> summary(var_grad) #> # A tibble: 5 × 10 #>   variable      mean    median     sd    mad       q5        q95   rhat ess_bulk #>   <chr>        <dbl>     <dbl>  <dbl>  <dbl>    <dbl>      <dbl>  <dbl>    <dbl> #> 1 lp__         0         0     0      0          0        0      NA          NA  #> 2 log_p__  -1047.    -1046.    1.25   0.975  -1049.   -1045.      1.00     1017. #> 3 log_g__     -0.978    -0.660 0.966  0.678     -2.84    -0.0566  1.00     1054. #> 4 pars[1]     10.0      10.0   0.0847 0.0877     9.88    10.2     0.999    1025. #> 5 pars[2]      1.92      1.92  0.0528 0.0523     1.83     2.01    1.00     1047. #> # ℹ 1 more variable: ess_tail <dbl>"},{"path":"https://andrjohns.github.io/StanEstimators/index.html","id":"pathfinder","dir":"","previous_headings":"Usage","what":"Pathfinder","title":"Estimate Parameters for Arbitrary R Functions using Stan","text":"","code":"path_fd <- stan_pathfinder(loglik_fun, inits, additional_args = list(y),                               lower = c(-Inf, 0),                               seed = 1234) path_grad <- stan_pathfinder(loglik_fun, inits, additional_args = list(y),                               grad_fun = grad,                               lower = c(-Inf, 0),                               seed = 1234) summary(path_fd) #> # A tibble: 5 × 10 #>   variable        mean   median     sd    mad        q5      q95  rhat ess_bulk #>   <chr>          <dbl>    <dbl>  <dbl>  <dbl>     <dbl>    <dbl> <dbl>    <dbl> #> 1 lp_approx__     3.04     3.45 1.19   0.704      0.609     4.07 1.00    652.   #> 2 lp__        -1046.   -1046.   1.09   0.661  -1049.    -1045.   1.00    653.   #> 3 path__          2.51     3    1.10   1.48       1         4    2.65      1.20 #> 4 pars[1]         9.97     9.96 0.0872 0.0835     9.82     10.1  1.000   803.   #> 5 pars[2]         1.96     1.96 0.0633 0.0606     1.86      2.07 1.00    734.   #> # ℹ 1 more variable: ess_tail <dbl> summary(path_grad) #> # A tibble: 5 × 10 #>   variable        mean   median     sd    mad        q5      q95  rhat ess_bulk #>   <chr>          <dbl>    <dbl>  <dbl>  <dbl>     <dbl>    <dbl> <dbl>    <dbl> #> 1 lp_approx__     3.04     3.45 1.19   0.704      0.609     4.07 1.00    652.   #> 2 lp__        -1046.   -1046.   1.09   0.661  -1049.    -1045.   1.00    653.   #> 3 path__          2.51     3    1.10   1.48       1         4    2.65      1.20 #> 4 pars[1]         9.97     9.96 0.0872 0.0835     9.82     10.1  1.000   803.   #> 5 pars[2]         1.96     1.96 0.0633 0.0606     1.86      2.07 1.00    734.   #> # ℹ 1 more variable: ess_tail <dbl>"},{"path":"https://andrjohns.github.io/StanEstimators/reference/StanBase-class.html","id":null,"dir":"Reference","previous_headings":"","what":"StanBase base class — StanBase-class","title":"StanBase base class — StanBase-class","text":"StanBase base class","code":""},{"path":"https://andrjohns.github.io/StanEstimators/reference/StanEstimators-package.html","id":null,"dir":"Reference","previous_headings":"","what":"The StanEstimators package. — StanEstimators-package","title":"The StanEstimators package. — StanEstimators-package","text":"ToDO","code":""},{"path":[]},{"path":"https://andrjohns.github.io/StanEstimators/reference/StanEstimators-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The StanEstimators package. — StanEstimators-package","text":"Maintainer: Andrew R. Johnson andrew.johnson@arjohnsonau.com (ORCID) contributors: Jonah Gabry jsg2201@columbia.edu [contributor] Rok Češnovar rok.cesnovar@fri.uni-lj.si [contributor] Stan Development Team (CmdStan sources headers) [copyright holder] Lawrence Livermore National Security (SUNDIALS sources headers) [copyright holder]","code":""},{"path":"https://andrjohns.github.io/StanEstimators/reference/constrain_variables-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Constrain a vector of variables. — constrain_variables","title":"Constrain a vector of variables. — constrain_variables","text":"Constrain vector variables.","code":""},{"path":"https://andrjohns.github.io/StanEstimators/reference/constrain_variables-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constrain a vector of variables. — constrain_variables","text":"","code":"constrain_variables(stan_object, unconstrained_variables)  # S4 method for class 'StanBase' constrain_variables(stan_object, unconstrained_variables)"},{"path":"https://andrjohns.github.io/StanEstimators/reference/constrain_variables-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constrain a vector of variables. — constrain_variables","text":"stan_object StanBase object. unconstrained_variables Vector unconstrained variables.","code":""},{"path":"https://andrjohns.github.io/StanEstimators/reference/grad_log_prob-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the log probability and its gradient of the model given a vector of unconstrained variables. — grad_log_prob","title":"Calculate the log probability and its gradient of the model given a vector of unconstrained variables. — grad_log_prob","text":"Calculate log probability gradient model given vector unconstrained variables.","code":""},{"path":"https://andrjohns.github.io/StanEstimators/reference/grad_log_prob-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the log probability and its gradient of the model given a vector of unconstrained variables. — grad_log_prob","text":"","code":"grad_log_prob(stan_object, unconstrained_variables, jacobian = TRUE)  # S4 method for class 'StanBase' grad_log_prob(stan_object, unconstrained_variables, jacobian = TRUE)"},{"path":"https://andrjohns.github.io/StanEstimators/reference/grad_log_prob-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the log probability and its gradient of the model given a vector of unconstrained variables. — grad_log_prob","text":"stan_object StanBase object. unconstrained_variables Vector unconstrained variables. jacobian Whether include Jacobian adjustment.","code":""},{"path":"https://andrjohns.github.io/StanEstimators/reference/hessian-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the log probability, its gradient, and its hessian matrix of the model given a vector of unconstrained variables. — hessian","title":"Calculate the log probability, its gradient, and its hessian matrix of the model given a vector of unconstrained variables. — hessian","text":"Calculate log probability, gradient, hessian matrix model given vector unconstrained variables.","code":""},{"path":"https://andrjohns.github.io/StanEstimators/reference/hessian-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the log probability, its gradient, and its hessian matrix of the model given a vector of unconstrained variables. — hessian","text":"","code":"hessian(stan_object, unconstrained_variables, jacobian = TRUE)  # S4 method for class 'StanBase' hessian(stan_object, unconstrained_variables, jacobian = TRUE)"},{"path":"https://andrjohns.github.io/StanEstimators/reference/hessian-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the log probability, its gradient, and its hessian matrix of the model given a vector of unconstrained variables. — hessian","text":"stan_object StanBase object. unconstrained_variables Vector unconstrained variables. jacobian Whether include Jacobian adjustment.","code":""},{"path":"https://andrjohns.github.io/StanEstimators/reference/log_prob-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the log probability of the model given a vector of unconstrained variables. — log_prob","title":"Calculate the log probability of the model given a vector of unconstrained variables. — log_prob","text":"Calculate log probability model given vector unconstrained variables.","code":""},{"path":"https://andrjohns.github.io/StanEstimators/reference/log_prob-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the log probability of the model given a vector of unconstrained variables. — log_prob","text":"","code":"log_prob(stan_object, unconstrained_variables, jacobian = TRUE)  # S4 method for class 'StanBase' log_prob(stan_object, unconstrained_variables, jacobian = TRUE)"},{"path":"https://andrjohns.github.io/StanEstimators/reference/log_prob-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the log probability of the model given a vector of unconstrained variables. — log_prob","text":"stan_object StanBase object. unconstrained_variables Vector unconstrained variables. jacobian Whether include Jacobian adjustment.","code":""},{"path":"https://andrjohns.github.io/StanEstimators/reference/loo.StanBase.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate approximate leave-one-out cross-validation (LOO-CV) for a model. — loo.StanBase","title":"Calculate approximate leave-one-out cross-validation (LOO-CV) for a model. — loo.StanBase","text":"Calculate approximate leave-one-cross-validation (LOO-CV) model.","code":""},{"path":"https://andrjohns.github.io/StanEstimators/reference/loo.StanBase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate approximate leave-one-out cross-validation (LOO-CV) for a model. — loo.StanBase","text":"","code":"# S3 method for class 'StanBase' loo(x, pointwise_ll_fun, additional_args = list(), moment_match = FALSE, ...)"},{"path":"https://andrjohns.github.io/StanEstimators/reference/loo.StanBase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate approximate leave-one-out cross-validation (LOO-CV) for a model. — loo.StanBase","text":"x StanBase object. pointwise_ll_fun Function calculates pointwise log-likelihood given vector parameter values. additional_args List additional arguments passed pointwise_ll_fun. moment_match (logical) Whether use moment-matching correction problematic observations. ... Additional arguments passed loo::loo().","code":""},{"path":"https://andrjohns.github.io/StanEstimators/reference/stan_diagnose.html","id":null,"dir":"Reference","previous_headings":"","what":"stan_diagnose — stan_diagnose","title":"stan_diagnose — stan_diagnose","text":"Check gradient estimation using Stan's 'Diagnose' method","code":""},{"path":"https://andrjohns.github.io/StanEstimators/reference/stan_diagnose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"stan_diagnose — stan_diagnose","text":"","code":"stan_diagnose(   fn,   par_inits = NULL,   n_pars = NULL,   additional_args = list(),   grad_fun = NULL,   lower = -Inf,   upper = Inf,   eval_standalone = FALSE,   globals = TRUE,   packages = NULL,   seed = NULL,   refresh = NULL,   quiet = FALSE,   output_dir = NULL,   output_basename = NULL,   sig_figs = NULL )"},{"path":"https://andrjohns.github.io/StanEstimators/reference/stan_diagnose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"stan_diagnose — stan_diagnose","text":"fn Function estimate parameters par_inits Initial values parameters. can either numeric vector initial values (used chains), list numeric vectors (length equal number chains), function taking single argument (chain ID) returning numeric vector initial values, NULL (case Stan generate initial values automatically). (must specified n_pars NULL) n_pars Number parameters estimate (must specified par_inits NULL) additional_args List additional arguments pass function grad_fun Function calculating gradients w.r.t. parameter lower Lower bound constraint(s) parameters upper Upper bound constraint(s) parameters eval_standalone (logical) Whether evaluate function separate R session. Defaults FALSE. globals (optional) logical, character vector, named list control globals handled evaluating functions separate R session. Ignored eval_standalone = FALSE. details, see section 'Globals used future expressions' help future::future(). packages (optional) character vector specifying packages attached R environment evaluating function. Ignored eval_standalone = FALSE. seed Random seed refresh Number iterations printing quiet (logical) Whether suppress Stan's output output_dir Directory store outputs output_basename Basename use output files sig_figs Number significant digits use printing","code":""},{"path":"https://andrjohns.github.io/StanEstimators/reference/stan_diagnose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"stan_diagnose — stan_diagnose","text":"StanLaplace object","code":""},{"path":"https://andrjohns.github.io/StanEstimators/reference/stan_laplace.html","id":null,"dir":"Reference","previous_headings":"","what":"stan_laplace — stan_laplace","title":"stan_laplace — stan_laplace","text":"Estimate parameters using Stan's laplace algorithm","code":""},{"path":"https://andrjohns.github.io/StanEstimators/reference/stan_laplace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"stan_laplace — stan_laplace","text":"","code":"stan_laplace(   fn,   par_inits = NULL,   n_pars = NULL,   additional_args = list(),   grad_fun = NULL,   lower = -Inf,   upper = Inf,   eval_standalone = FALSE,   globals = TRUE,   packages = NULL,   seed = NULL,   refresh = NULL,   quiet = FALSE,   output_dir = NULL,   output_basename = NULL,   sig_figs = NULL,   mode = NULL,   jacobian = NULL,   draws = NULL,   opt_args = NULL )"},{"path":"https://andrjohns.github.io/StanEstimators/reference/stan_laplace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"stan_laplace — stan_laplace","text":"fn Function estimate parameters par_inits Initial values parameters. can either numeric vector initial values (used chains), list numeric vectors (length equal number chains), function taking single argument (chain ID) returning numeric vector initial values, NULL (case Stan generate initial values automatically). (must specified n_pars NULL) n_pars Number parameters estimate (must specified par_inits NULL) additional_args List additional arguments pass function grad_fun Function calculating gradients w.r.t. parameter lower Lower bound constraint(s) parameters upper Upper bound constraint(s) parameters eval_standalone (logical) Whether evaluate function separate R session. Defaults FALSE. globals (optional) logical, character vector, named list control globals handled evaluating functions separate R session. Ignored eval_standalone = FALSE. details, see section 'Globals used future expressions' help future::future(). packages (optional) character vector specifying packages attached R environment evaluating function. Ignored eval_standalone = FALSE. seed Random seed refresh Number iterations printing quiet (logical) Whether suppress Stan's output output_dir Directory store outputs output_basename Basename use output files sig_figs Number significant digits use printing mode Mode laplace approximation, can either vector values, StanOptimize object, NULL. jacobian (logical) Whether use Jacobian adjustment constrained variables. draws (positive integer) Number approximate posterior samples draw save. opt_args (named list) named list optional arguments pass stan_optimize() mode=NULL.","code":""},{"path":"https://andrjohns.github.io/StanEstimators/reference/stan_laplace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"stan_laplace — stan_laplace","text":"StanLaplace object","code":""},{"path":"https://andrjohns.github.io/StanEstimators/reference/stan_optimize.html","id":null,"dir":"Reference","previous_headings":"","what":"stan_optimize — stan_optimize","title":"stan_optimize — stan_optimize","text":"Estimate parameters using Stan's optimization algorithms","code":""},{"path":"https://andrjohns.github.io/StanEstimators/reference/stan_optimize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"stan_optimize — stan_optimize","text":"","code":"stan_optimize(   fn,   par_inits = NULL,   n_pars = NULL,   additional_args = list(),   algorithm = \"lbfgs\",   grad_fun = NULL,   lower = -Inf,   upper = Inf,   eval_standalone = FALSE,   globals = TRUE,   packages = NULL,   seed = NULL,   refresh = NULL,   quiet = FALSE,   output_dir = NULL,   output_basename = NULL,   sig_figs = NULL,   save_iterations = NULL,   jacobian = NULL,   init_alpha = NULL,   iter = NULL,   tol_obj = NULL,   tol_rel_obj = NULL,   tol_grad = NULL,   tol_rel_grad = NULL,   tol_param = NULL,   history_size = NULL )"},{"path":"https://andrjohns.github.io/StanEstimators/reference/stan_optimize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"stan_optimize — stan_optimize","text":"fn Function estimate parameters par_inits Initial values parameters. can either numeric vector initial values (used chains), list numeric vectors (length equal number chains), function taking single argument (chain ID) returning numeric vector initial values, NULL (case Stan generate initial values automatically). (must specified n_pars NULL) n_pars Number parameters estimate (must specified par_inits NULL) additional_args List additional arguments pass function algorithm (string) optimization algorithm. One \"lbfgs\", \"bfgs\", \"newton\". grad_fun Function calculating gradients w.r.t. parameter lower Lower bound constraint(s) parameters upper Upper bound constraint(s) parameters eval_standalone (logical) Whether evaluate function separate R session. Defaults FALSE. globals (optional) logical, character vector, named list control globals handled evaluating functions separate R session. Ignored eval_standalone = FALSE. details, see section 'Globals used future expressions' help future::future(). packages (optional) character vector specifying packages attached R environment evaluating function. Ignored eval_standalone = FALSE. seed Random seed refresh Number iterations printing quiet (logical) Whether suppress Stan's output output_dir Directory store outputs output_basename Basename use output files sig_figs Number significant digits use printing save_iterations Save optimization iterations output file jacobian (logical) Whether use Jacobian adjustment constrained variables. historical reasons, default FALSE, meaning optimization yields (regularized) maximum likelihood estimate. Setting TRUE yields maximum posteriori estimate. init_alpha (positive real) initial step size parameter. iter (positive integer) maximum number iterations. tol_obj (positive real) Convergence tolerance changes objective function value. tol_rel_obj (positive real) Convergence tolerance relative changes objective function value. tol_grad (positive real) Convergence tolerance norm gradient. tol_rel_grad (positive real) Convergence tolerance relative norm gradient. tol_param (positive real) Convergence tolerance changes parameter value. history_size (positive integer) size history used approximating Hessian. available L-BFGS.","code":""},{"path":"https://andrjohns.github.io/StanEstimators/reference/stan_optimize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"stan_optimize — stan_optimize","text":"StanOptimize object","code":""},{"path":"https://andrjohns.github.io/StanEstimators/reference/stan_pathfinder.html","id":null,"dir":"Reference","previous_headings":"","what":"stan_pathfinder — stan_pathfinder","title":"stan_pathfinder — stan_pathfinder","text":"Estimate parameters using Stan's pathfinder algorithm","code":""},{"path":"https://andrjohns.github.io/StanEstimators/reference/stan_pathfinder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"stan_pathfinder — stan_pathfinder","text":"","code":"stan_pathfinder(   fn,   par_inits = NULL,   n_pars = NULL,   additional_args = list(),   grad_fun = NULL,   lower = -Inf,   upper = Inf,   eval_standalone = FALSE,   globals = TRUE,   packages = NULL,   seed = NULL,   refresh = NULL,   quiet = FALSE,   output_dir = NULL,   output_basename = NULL,   sig_figs = NULL,   init_alpha = NULL,   tol_obj = NULL,   tol_rel_obj = NULL,   tol_grad = NULL,   tol_rel_grad = NULL,   tol_param = NULL,   history_size = NULL,   num_psis_draws = NULL,   num_paths = NULL,   save_single_paths = NULL,   max_lbfgs_iters = NULL,   num_draws = NULL,   num_elbo_draws = NULL )"},{"path":"https://andrjohns.github.io/StanEstimators/reference/stan_pathfinder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"stan_pathfinder — stan_pathfinder","text":"fn Function estimate parameters par_inits Initial values parameters. can either numeric vector initial values (used chains), list numeric vectors (length equal number chains), function taking single argument (chain ID) returning numeric vector initial values, NULL (case Stan generate initial values automatically). (must specified n_pars NULL) n_pars Number parameters estimate (must specified par_inits NULL) additional_args List additional arguments pass function grad_fun Function calculating gradients w.r.t. parameter lower Lower bound constraint(s) parameters upper Upper bound constraint(s) parameters eval_standalone (logical) Whether evaluate function separate R session. Defaults FALSE. globals (optional) logical, character vector, named list control globals handled evaluating functions separate R session. Ignored eval_standalone = FALSE. details, see section 'Globals used future expressions' help future::future(). packages (optional) character vector specifying packages attached R environment evaluating function. Ignored eval_standalone = FALSE. seed Random seed refresh Number iterations printing quiet (logical) Whether suppress Stan's output output_dir Directory store outputs output_basename Basename use output files sig_figs Number significant digits use printing init_alpha (positive real) initial step size parameter. tol_obj (positive real) Convergence tolerance changes objective function value. tol_rel_obj (positive real) Convergence tolerance relative changes objective function value. tol_grad (positive real) Convergence tolerance norm gradient. tol_rel_grad (positive real) Convergence tolerance relative norm gradient. tol_param (positive real) Convergence tolerance changes parameter value. history_size (positive integer) size history used approximating Hessian. num_psis_draws (positive integer) Number PSIS draws return. num_paths (positive integer) Number single pathfinders run. save_single_paths (logical) Whether save results single pathfinder runs multi-pathfinder. max_lbfgs_iters (positive integer) maximum number iterations LBFGS. num_draws (positive integer) Number draws return performing pareto smooted importance sampling (PSIS). num_elbo_draws (positive integer) Number draws make calculating ELBO approximation iteration LBFGS.","code":""},{"path":"https://andrjohns.github.io/StanEstimators/reference/stan_pathfinder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"stan_pathfinder — stan_pathfinder","text":"StanPathfinder object","code":""},{"path":"https://andrjohns.github.io/StanEstimators/reference/stan_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"stan_sample — stan_sample","title":"stan_sample — stan_sample","text":"Estimate parameters using Stan's sampling algorithms","code":""},{"path":"https://andrjohns.github.io/StanEstimators/reference/stan_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"stan_sample — stan_sample","text":"","code":"stan_sample(   fn,   par_inits = NULL,   n_pars = NULL,   additional_args = list(),   algorithm = \"hmc\",   engine = \"nuts\",   grad_fun = NULL,   lower = -Inf,   upper = Inf,   eval_standalone = (parallel_chains > 1),   globals = TRUE,   packages = NULL,   seed = NULL,   refresh = NULL,   quiet = FALSE,   output_dir = NULL,   output_basename = NULL,   sig_figs = NULL,   num_chains = 4,   parallel_chains = 1,   num_samples = 1000,   num_warmup = 1000,   save_warmup = NULL,   thin = NULL,   adapt_engaged = NULL,   adapt_gamma = NULL,   adapt_delta = NULL,   adapt_kappa = NULL,   adapt_t0 = NULL,   adapt_init_buffer = NULL,   adapt_term_buffer = NULL,   adapt_window = NULL,   int_time = NULL,   max_treedepth = NULL,   metric = NULL,   metric_file = NULL,   stepsize = NULL,   stepsize_jitter = NULL,   check_diagnostics = TRUE )"},{"path":"https://andrjohns.github.io/StanEstimators/reference/stan_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"stan_sample — stan_sample","text":"fn Function estimate parameters par_inits Initial values parameters. can either numeric vector initial values (used chains), list numeric vectors (length equal number chains), function taking single argument (chain ID) returning numeric vector initial values, NULL (case Stan generate initial values automatically). (must specified n_pars NULL) n_pars Number parameters estimate (must specified par_inits NULL) additional_args List additional arguments pass function algorithm (string) sampling algorithm. One \"hmc\" \"fixed_param\". engine (string) HMC engine use, one \"nuts\" \"static\" grad_fun Function calculating gradients w.r.t. parameter lower Lower bound constraint(s) parameters upper Upper bound constraint(s) parameters eval_standalone (logical) Whether evaluate function separate R session. Defaults (parallel_chains > 1). Must TRUE parallel_chains > 1. globals (optional) logical, character vector, named list control globals handled evaluating functions separate R session. Ignored eval_standalone = FALSE. details, see section 'Globals used future expressions' help future::future(). packages (optional) character vector specifying packages attached R environment evaluating function. Ignored eval_standalone = FALSE. seed Random seed refresh Number iterations printing quiet (logical) Whether suppress Stan's output output_dir Directory store outputs output_basename Basename use output files sig_figs Number significant digits use printing num_chains (positive integer) number Markov chains run. default 4. parallel_chains (positive integer) number chains run parallel, default 1. num_samples (positive integer) number post-warmup iterations run per chain. num_warmup (positive integer) number warmup iterations run per chain. save_warmup (logical) warmup iterations saved? default FALSE. thin (positive integer) period saved samples. typically left default (thinning) unless memory problem. adapt_engaged (logical) warmup adaptation? default TRUE. adapt_gamma (positive real) Adaptation regularization scale. adapt_delta (real (0,1)) adaptation target acceptance statistic. adapt_kappa (positive real) Adaptation relaxation exponent. adapt_t0 (positive real) Adaptation iteration offset. adapt_init_buffer (nonnegative integer) Width initial fast timestep adaptation interval warmup. adapt_term_buffer (nonnegative integer) Width final fast timestep adaptation interval warmup. adapt_window (nonnegative integer) Initial width slow timestep/metric adaptation interval. int_time (positive real) Total integration time max_treedepth (positive integer) maximum allowed tree depth NUTS engine. metric (string) One \"diag_e\", \"dense_e\", \"unit_e\", specifying geometry base manifold. metric_file (character vector) paths JSON Rdump files (one per chain) compatible CmdStan contain precomputed inverse metrics. stepsize (positive real) initial step size discrete approximation continuous Hamiltonian dynamics. stepsize_jitter (real (0,1)) Allows step size “jittered” randomly sampling avoid poor interactions fixed step size regions high curvature. check_diagnostics (logical) Whether check common problems HMC sampling (divergent transitions, max tree depth hits, low Bayesian fraction missing information). Default TRUE.","code":""},{"path":"https://andrjohns.github.io/StanEstimators/reference/stan_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"stan_sample — stan_sample","text":"StanMCMC object","code":""},{"path":"https://andrjohns.github.io/StanEstimators/reference/stan_variational.html","id":null,"dir":"Reference","previous_headings":"","what":"stan_variational — stan_variational","title":"stan_variational — stan_variational","text":"Estimate parameters using Stan's variational inference algorithms","code":""},{"path":"https://andrjohns.github.io/StanEstimators/reference/stan_variational.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"stan_variational — stan_variational","text":"","code":"stan_variational(   fn,   par_inits = NULL,   n_pars = NULL,   additional_args = list(),   algorithm = \"meanfield\",   grad_fun = NULL,   lower = -Inf,   upper = Inf,   eval_standalone = FALSE,   globals = TRUE,   packages = NULL,   seed = NULL,   refresh = NULL,   quiet = FALSE,   output_dir = NULL,   output_basename = NULL,   sig_figs = NULL,   iter = NULL,   grad_samples = NULL,   elbo_samples = NULL,   eta = NULL,   adapt_engaged = NULL,   adapt_iter = NULL,   tol_rel_obj = NULL,   eval_elbo = NULL,   output_samples = NULL )"},{"path":"https://andrjohns.github.io/StanEstimators/reference/stan_variational.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"stan_variational — stan_variational","text":"fn Function estimate parameters par_inits Initial values parameters. can either numeric vector initial values (used chains), list numeric vectors (length equal number chains), function taking single argument (chain ID) returning numeric vector initial values, NULL (case Stan generate initial values automatically). (must specified n_pars NULL) n_pars Number parameters estimate (must specified par_inits NULL) additional_args List additional arguments pass function algorithm (string) variational inference algorithm. One \"meanfield\" \"fullrank\". grad_fun Function calculating gradients w.r.t. parameter lower Lower bound constraint(s) parameters upper Upper bound constraint(s) parameters eval_standalone (logical) Whether evaluate function separate R session. Defaults FALSE. globals (optional) logical, character vector, named list control globals handled evaluating functions separate R session. Ignored eval_standalone = FALSE. details, see section 'Globals used future expressions' help future::future(). packages (optional) character vector specifying packages attached R environment evaluating function. Ignored eval_standalone = FALSE. seed Random seed refresh Number iterations printing quiet (logical) Whether suppress Stan's output output_dir Directory store outputs output_basename Basename use output files sig_figs Number significant digits use printing iter (positive integer) maximum number iterations. grad_samples (positive integer) number samples Monte Carlo estimate gradients. elbo_samples (positive integer) number samples Monte Carlo estimate ELBO (objective function). eta (positive real) step size weighting parameter adaptive step size sequence. adapt_engaged (logical) warmup adaptation? adapt_iter (positive integer) maximum number adaptation iterations. tol_rel_obj (positive real) Convergence tolerance relative norm objective. eval_elbo (positive integer) Evaluate ELBO every Nth iteration. output_samples (positive integer) Number approximate posterior samples draw save.","code":""},{"path":"https://andrjohns.github.io/StanEstimators/reference/stan_variational.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"stan_variational — stan_variational","text":"StanVariational object","code":""},{"path":"https://andrjohns.github.io/StanEstimators/reference/stan_versions.html","id":null,"dir":"Reference","previous_headings":"","what":"stan_versions — stan_versions","title":"stan_versions — stan_versions","text":"stan_versions","code":""},{"path":"https://andrjohns.github.io/StanEstimators/reference/stan_versions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"stan_versions — stan_versions","text":"","code":"stan_versions()"},{"path":"https://andrjohns.github.io/StanEstimators/reference/stan_versions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"stan_versions — stan_versions","text":"named list Stan Stan Math library versions","code":""},{"path":"https://andrjohns.github.io/StanEstimators/reference/summary-StanLaplace.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for objects of class StanLaplace. — summary-StanLaplace","title":"Summary method for objects of class StanLaplace. — summary-StanLaplace","text":"Summary method objects class StanLaplace.","code":""},{"path":"https://andrjohns.github.io/StanEstimators/reference/summary-StanLaplace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for objects of class StanLaplace. — summary-StanLaplace","text":"","code":"# S4 method for class 'StanLaplace' summary(object, ...)"},{"path":"https://andrjohns.github.io/StanEstimators/reference/summary-StanLaplace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for objects of class StanLaplace. — summary-StanLaplace","text":"object StanLaplace object. ... Additional arguments, currently unused.","code":""},{"path":"https://andrjohns.github.io/StanEstimators/reference/summary-StanMCMC.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for objects of class StanMCMC. — summary-StanMCMC","title":"Summary method for objects of class StanMCMC. — summary-StanMCMC","text":"Summary method objects class StanMCMC.","code":""},{"path":"https://andrjohns.github.io/StanEstimators/reference/summary-StanMCMC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for objects of class StanMCMC. — summary-StanMCMC","text":"","code":"# S4 method for class 'StanMCMC' summary(object, ...)"},{"path":"https://andrjohns.github.io/StanEstimators/reference/summary-StanMCMC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for objects of class StanMCMC. — summary-StanMCMC","text":"object StanMCMC object. ... Additional arguments, currently unused.","code":""},{"path":"https://andrjohns.github.io/StanEstimators/reference/summary-StanOptimize.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for objects of class StanOptimize. — summary-StanOptimize","title":"Summary method for objects of class StanOptimize. — summary-StanOptimize","text":"Summary method objects class StanOptimize.","code":""},{"path":"https://andrjohns.github.io/StanEstimators/reference/summary-StanOptimize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for objects of class StanOptimize. — summary-StanOptimize","text":"","code":"# S4 method for class 'StanOptimize' summary(object, ...)"},{"path":"https://andrjohns.github.io/StanEstimators/reference/summary-StanOptimize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for objects of class StanOptimize. — summary-StanOptimize","text":"object StanOptimize object. ... Additional arguments, currently unused.","code":""},{"path":"https://andrjohns.github.io/StanEstimators/reference/summary-StanPathfinder.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for objects of class StanPathfinder. — summary-StanPathfinder","title":"Summary method for objects of class StanPathfinder. — summary-StanPathfinder","text":"Summary method objects class StanPathfinder.","code":""},{"path":"https://andrjohns.github.io/StanEstimators/reference/summary-StanPathfinder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for objects of class StanPathfinder. — summary-StanPathfinder","text":"","code":"# S4 method for class 'StanPathfinder' summary(object, ...)"},{"path":"https://andrjohns.github.io/StanEstimators/reference/summary-StanPathfinder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for objects of class StanPathfinder. — summary-StanPathfinder","text":"object StanPathfinder object. ... Additional arguments, currently unused.","code":""},{"path":"https://andrjohns.github.io/StanEstimators/reference/summary-StanVariational.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for objects of class StanVariational. — summary-StanVariational","title":"Summary method for objects of class StanVariational. — summary-StanVariational","text":"Summary method objects class StanVariational.","code":""},{"path":"https://andrjohns.github.io/StanEstimators/reference/summary-StanVariational.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for objects of class StanVariational. — summary-StanVariational","text":"","code":"# S4 method for class 'StanVariational' summary(object, ...)"},{"path":"https://andrjohns.github.io/StanEstimators/reference/summary-StanVariational.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for objects of class StanVariational. — summary-StanVariational","text":"object StanVariational object. ... Additional arguments, currently unused.","code":""},{"path":"https://andrjohns.github.io/StanEstimators/reference/unconstrain_draws-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Unconstrain all parameter draws. — unconstrain_draws","title":"Unconstrain all parameter draws. — unconstrain_draws","text":"Unconstrain parameter draws.","code":""},{"path":"https://andrjohns.github.io/StanEstimators/reference/unconstrain_draws-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unconstrain all parameter draws. — unconstrain_draws","text":"","code":"unconstrain_draws(stan_object, draws = NULL)  # S4 method for class 'StanBase' unconstrain_draws(stan_object, draws = NULL)  # S4 method for class 'StanOptimize' unconstrain_draws(stan_object, draws = NULL)"},{"path":"https://andrjohns.github.io/StanEstimators/reference/unconstrain_draws-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unconstrain all parameter draws. — unconstrain_draws","text":"stan_object StanBase object. draws (optional) posterior::draws_* object unconstrained (instead draws StanBase object).","code":""},{"path":"https://andrjohns.github.io/StanEstimators/reference/unconstrain_variables-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Unconstrain a vector of variables. — unconstrain_variables","title":"Unconstrain a vector of variables. — unconstrain_variables","text":"Unconstrain vector variables.","code":""},{"path":"https://andrjohns.github.io/StanEstimators/reference/unconstrain_variables-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unconstrain a vector of variables. — unconstrain_variables","text":"","code":"unconstrain_variables(stan_object, variables)  # S4 method for class 'StanBase' unconstrain_variables(stan_object, variables)"},{"path":"https://andrjohns.github.io/StanEstimators/reference/unconstrain_variables-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unconstrain a vector of variables. — unconstrain_variables","text":"stan_object StanBase object. variables Vector variables unconstrained.","code":""}]
